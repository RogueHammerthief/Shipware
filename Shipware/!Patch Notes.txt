v 0.7:
  -Testing release

v 0.701 (Count 91955):
  -Modified how end-of-evaluation messages are handled
  -The firstRun message is now presented as a notification that does not interfere with config 
   evaluation.
  -AutoPopulate can now be used in a firstRun scenario
  -Added -items flag to the Definitions command, allowing you to view the TypeIds and SubTypeIds of 
   items contained in the first inventory of blocks in the Populate group
  -Modified reports to combat elements getting 'stuck' in multiplayer, espically when using MFDs.
  -Added a 'ResetReports' command that can be run if the elements get stuck anyway.
  -Added a 'CustomInfo' DataType, which is similar to the existing DetailInfo DataType, but 
   returns the strings generated by modded blocks. Basically, if DetailInfo isn't giving you the
   data you expect, try CustomInfo instead.

v 0.702 (Count 98380)
  -Reworked Turret Action Handlers for the Warfare update. Instead of offensive and defensive 
   handlers for each turret type, any turret (Not counting the new custom turret controller) can 
   now be set to one of these six profiles: 
    >TurretPassive: Targeting disabled
    >TurretDefensive: Targets meteors and projectiles
    >TurretPrecision: Targets characters, small grid, meteors, projectiles
	>TurretFastTracking: Targets small grid, large grid, stations
	>TurretAntiArmor: Targets large grids, stations
	>TurretSiege: Targets stations
  -Added Action Handlers: SoundPlay and SoundStop for sound blocks, WeaponFire for weapons.
  -ActionSets can now manipulate the states of other ActionSets. This is done from the ActionSet 
   initiator using the 'Action#ActionSetsLinkedToOn' and 'Action#ActionSetsLinkedToOff' keys. The 
   keys take a state list of the ActionSets you want changed and the state you want them set to in 
   the following format: Reactors: On, HyGens: On, Batteries: Off
  -ActionSet elements now display a fault warning on surfaces in addition to generating a log entry
   when an exception is caught. Generally, exceptions are caused by assigning Action Handlers to 
   blocks that can't perform that action, or by generating infinite loops with the newly added 
   ability to manipulate ActionSets from other ActionSets.
  -Moved config for controlling Trigger arming and disarming from Trigger initiators to ActionSet 
   initiators using the 'Action#TriggersLinkedToOn' and 'Action#TriggersLinkedToOff' keys. These 
   keys use the same state list format as the linked ActionSets above.
  -Replaced all references to the 'Populate' group with the new 'Target' group, which makes more 
   sense given the multitude of purposes it now serves.
  -Full re-write of AutoPopulate command. Added automatic generation of tallies for the new Warfare
   ammo types. Also adjusted the functionallity of the existing -confirm switch and added two more:
    >confirm: Still forces AutoPopulate to run even when there's Shipware config on the grid, but 
	 existing tallies are no longer preserved. This can lead to orphaned config on the grid.
	>include: Preserves existing tallies, and finds blocks that are compatible with them. Can even
	 work with tallies for modded items. Config generated is messy but functional. Does not require
	 the confirm switch to be set.
	>target: Limits AutoPopulate to members of the 'Target' block group on the grid (As well as the
	programmable block running the script). Can be used in conjunction with the -include switch
  -Retired keys:
    >Trigger#LinkedActionSet
    >Trigger#LinkedActionOn
    >Trigger#LinkedActionOff
  -New keys:
    >Action#ActionSetsLinkedToOn
    >Action#ActionSetsLinkedToOff
    >Action#TriggersLinkedToOn
    >Action#TriggersLinkedToOff

v 0.8 (Count 94326)
 -Full re-write of Evaluate. Major changes include:
   >Each script object declaration now has a dedicated section in the PB config. This makes shuffling 
    things around much easier, but config written prior to this change will need to be modified	to
	adhere to the new syntax.
   >Evaluate now differentiates between configuration Errors that will prevent the script from 
    functioning, and configuration Warnings that should be addressed but the script can ignore.
	In general, Errors occur in PB config, Warnings occur on grid config.
   >If an Error prevents the script from running, the script will attempt to run using the last good
    config (Assuming there is one).
 -Re-write of Reconstitute to comply with changes to evaluate and configuration handling in general. 
  Reconstitute now provides the timestamp of the last good config it's going back to.
 -Another full re-write of AutoPopulate, to comply with changes to configuration handling and to
  make it far friendlier to existing config. Under most circumstances, you should now be able to run
  AP without worrying about it messing with config you've written, or config from other mods and 
  scripts.
   >In addition to generating config for basic tallies, AP now generates config for common ActionSets,
    with a linking 'Roost' set that can quickly switch a grid from a docked state to an active state.
   >The old GenericReport generated by AP is now an MFD called APScreen, which includes separate 
    pages for Tallies, ActionSets, and the script log.
   >Include switch removed because that's now the default behavior.
   >Confirm switch removed because the method is now far less destructive.
   >Target switch preserved. In addition, placing the [SW.APIgnore] section header by itself in a 
    block's CustomData will prevent AP from considering that block.
   >AP can be further controlled via keys in the [SW.Init] section on the PB. These keys will allow
    you to prevent AP from considering blocks by their Type or SubType (Which can be looked up online
	or retrieved with the TypeDefinitions command). You can also stop AP from generating configuration
	for a given Tally or ActionSet with the APExcludedDeclarations key.
 -Added a 'APExclusionReport' command, which generates a list of all blocks on the construct that 
  are being excluded from AP by APIgnore, APExcludedBlockTypes, etc.
 -Standardized usage of targeting groups across commands.
   >Removed references to the Template group. When a command needs to know which blocks to pull 
    information from, use the Source group.
   >When a command needs to know which blocks will have their CustomData altered, use the Target 
    group. 
 -The 'Definitions' command is now TypeDefinitions, and the 'Properties' command is now 
  TerminalProperties, because I kept getting confused.
 -Added a 'SurfaceScripts' command, which lists the internal name of all available LCD scripts. 
 -Removed Populate, PopulatePB, LoadExisting, and Template commands, along with supporting code.
 -Added error handling for duplicate MFDs.
 -Re-wrote numeric formatting. Should be slightly faster, and can now accommodate one decimal place 
  as well as numbers as large as one trillion.
 -Removed Tally's lowGood key and replaced it with the ColorCoder key. This key can be set to lowGood
  or highGood, but it can also be set to any custom color, which will override color coding entirely.
   >The colors used at each threshold of color coding can now be customized in the [SW.Init] section
    on the PB.
 -Added new TallyTypes: 
   >VentPressure: Expresses the pressurization of a vent's environment as a percentage
   >PistonExtension: Shows the current extension of a piston in meters
   >RotorAngle: Shows the current angle of a rotor in degrees
   >PowerCurrent: Shows the current load on Power Producer blocks like reactors, turbines, and 
    batteries. The old PowerProducer type is now PowerMax to differentiate. PowerMax can be used for
	figuring out how much power a solar panel can generate at its current orientation, how much power
	a wind turbine is generating in the current weather, etc.
   >Integrity: Displays the current health of a block (Its construction completeness minus its damage 
    taken)
   >ControllerSpeed, ControllerGravity, and ControllerWeight: Fairly self-explanatory. These types
    must be linked to a ShipController (Cockpit, Remote Control, Couch, etc), and they work a
	bit different from other tally types. Multiple controllers linked to the same Tally will not add
	to the final value. Instead, one controller will be chosen as the data source, and additional
	controllers will serve as backup data sources to be used if the original controller becomes damaged.
 -Blocks can now be configured to perform multiple actions for an ActionSet without going through 
  Terminal Actions. Configuration for multiple actions uses the 'ActionsOn' and 'ActionsOff' keys,
  followed by a list of action handlers.
   >Removed old "profile" action handlers that would alter multiple properties on a block at once,
    like 'TurretDefensive'. Replaced these with handlers for each individual block property, like
	'TurretTargetSmallGridsOn'
 -Added new ActionSet handlers: 
   >GyroYawStabilize, GyroPitchStabilize, GyroRollStabilize: Sets the override of the specified 
    attitude to 0. Note that this does nothing if the Gyro Override is off.
   >JumpDriveRechargeOn/Off
   >TurretTargetEnemiesOn/Off, TurretTargetNeutralsOn/Off
   >TurretSubsystemDefault, TurretSubsystemWeapons, TurretSubsystemPropulsion, TurretSubsystemPowerSystems
   >Added Custom Turret Controller versions of each of the regular turret handlers. Just replace 
    'Turret' with 'Controller', ie, ControllerSubsystemDefault.
 -Raycasters are now full-fledged script objects, configured on the PB instead of on their cameras.
   >Raycasters can now be assigned to multiple cameras. The camera with the highest charge will be used
    to perform a raycast.
   >Tallies and ActionSets can now interact with Raycasters.
   >Raycasters can now have their behavior changed, though right now the only behavior available is 
    the linear scan.


 v 0.801 (Count 95507)
 -CONFIGURATION UPDATE REQUIRED: Altered the format of declaration section headers for all global
  components, removing indexes and replacing them with what was previously listed in the 'Name' key. 
  Existing configuration will not be recognized until it is updated to the new format.
  >OLD FORMAT:
   [SW.Dec.ActionSet00]
   Name = Roost
  >NEW FORMAT:
   [SW.Dec.ActionSet.Roost]
 -Updated various script processes to work with the new format (Evaluate, Reconstitute, AutoPopulate,
  writeConfig()).
 -Small alterations to evaluation of PB config. Evaluate doesn't give up as easily as it used to, 
  which should increase the odds of reporting more than one configuration error at a time.
 -Minor changes and optimizations to AutoPopulate. 
 -Added TargetInfo and FactionIcon scripts to the APScreen MFD generated by AutoPopulate.
 -AutoPopulate declarations are now written in a semi-predictable order.
 -Replaced the 'ThrustersElectric' and 'ThrustersHydrogen' AP declarations (Which only worked under
  very specific circumstances) with new ThrustersAtmospheric, ThrustersIon, and ThrustersHydrogen
  declarations. Note that there's a high probability that ThrustersIon will generate false-positives
  on modded blocks; this is an unavoidable consequence of how the game addresses thrusters.
 -Added handling for a ThrustersGeneric declaration to AutoPopulate, which grabs any thruster on the 
  grid regardles of its fuel type. This declaration is excluded by default.
 -The 'Roost' declaration can now be excluded from AutoPopulate.
 -APExclusionReport now reports on excluded declarations, and checks to see if each element in that 
  list can be matched to an AP declaration.
 -APExcludedDeclarations are no longer case-sensitive.
 -Bundled together most of the entries generated for Init's 'APExcludedBlockSubTypes' list with the 
  following catagories: FurnitureSubTypes, IsolatedCockpitSubTypes, ShelfSubTypes. Each of these use 
  the script prefix to indicate that they are only valid for use with this script. Note that existing
  lists that have all the members of those catagories listed individually will still work, but newly 
  generated lists will be much shorter.
 -Refactored internal tryGetColorFromConfig() method for my own sanity. Should be a bit faster, but 
  the changes should otherwise go unnoticed (Unless I broke something).
 -Centralized Init section key checks and generation for missing keys/values. Behavior should now be 
  consistent between evaluation and the firstRun scenario.
 -Fixed an issue keeping the MFD command from being able to pick a specific page in most circumstances.
 -!TODO! Workshop page for script
 -!TODO! GitHub account and repository.
 -!TODO! First tutorial
 -!TODO! Example grids (Snapper Gunship, Crab Frigate, Basilisk Minehead, Wyvern Carrier?). Double
  check script version when finalized.

v 0.802
 -Config for the 'Roost' set now includes a DelayOn key with a value of 8 when first generated by 
  AutoPopulate. 
 -Added the following block types to the catagories in APExcludedBlockSubTypes (No config change required)
   >FurnitureSubTypes: Captain's Desk
   >IsolatedCockpitSubTypes: Bridge Helm
   >ShelfSubTypes: Fridge, First Aid cabinet
 -Fixed a long-standing bug affecting the positioning of Report Elements on tall surfaces after the 
  first row.

 -!TODO! TerminalValues (20240910). Possibly build into TerminalProperties as -values instead of 
  making a seperate command.
 -!TODO! Report Padding
 -!TODO! ResetReports as an ActionSet key (20240917)
 -!TODO! 'Simple' raycast module
 -!TODO! Global LimitedMessageLog? (20240221)
 -!TODO! Multi-tic evaluate and AutoPopulate (20240304)
 -!TODO! Cyclers
 -!TODO! Combined Info Datatype - Combination of DetailInfo and CustomInfo
 -!TODO! ActionSet IgnoreIGC toggle
 -!TODO! ShipwareCommon channel for script instances to identify themselves and communicate (20230426 and 20230518)
 -!TODO! AutoPopulate -allUnique
 -?TODO? APModified informational group (20240311)
 -?TODO? Remote command (20240422 and 20240423)
 -?TODO? Import / Insert / Delete
 -?TODO? APAllItems
 -?TODO? ActivationRequiresSet
 -?TODO? Typed action handlers / Generic APB? (20230425)
 -?TODO? PopulateSection (20230109)
 -?TODO? CustomData WOT multi-page capability (20230523).
 -!TODO! See if I need to rename the script. Current rename contenders: Toolkit, GridUI.
 -*TODO* Color-code Warnings, Errors, and Messages? Maybe timestamps as well (Waiting on bug fixes)
 -Added new ActionSet handlers CameraRaycastEnable and CameraRaycastDisable. Note that cameras linked
  to the script's Raycasters have this function enabled automatically; these handlers are included 
  mostly to give you a way of turning the function off for a camera that won't be used to perform
  Raycast scans anymore. 

 General Information and Best Practices documentation section
 -Overview of Ini Format
   -Section headers, keys, values, multi-line
   -Breakdown of this script's section headers, PB and Grid
   -Discrete sections
 -Overview of script organization
   -PB vs Grid config
   -Script components
   -The State List format
 -Color list
 -Contents of each of the SubType catagories
 -What is a 'flag' (switch)
 -Where possible, link ActionSets together instead of having multiple sets doing the same thing to 
  a single block
 -On servers, delete Target and Source groups once they've been used to prevent cross-contamination

 Tutorial Topics
 From the perspective of modifying the starter space pod.
 -Getting Started: AutoPopulate and using the generic setup
   -Scripts and Experimental mode, AutoPopulate command, MFD command, Action command, Roost Action
   -Advise direct control of batteries
 -Getting Started: Basic surface setup
   -The ini format
   -MFDs vs Static Screens, multi-line config, blank, font size, columns, and arranging elements, CharPerLine
 -Getting Started: Advanced useage of AutoPopulate
   -Repeated use, blacklists, precedence of -target vs APIgnore vs construct
 -Adapting AutoPopulate: Laying the foundation with cleaner config
   -Sorting declarations, TacticalNuke
   -Never change the name of an AP declaration (Unless you also blacklist that declaration)
   -Limitations of AP: Same type blocks with different config will end up with one getting overwritten.
 -Adapting AutoPopulate: Adding a Reverse Thruster ActionSet
   -Reconstitute command (To organize config), Adding a new ActionSet, Linking Actions, Linking Blocks
   -Reconstitute only after evaluate, otherwise data may be lost
 -Adapting AutoPopulate: Adding a Tally
   -How about VentPressure to tell if the cabin is pressurized or not?
   -What about setting up basic ore and ingot tallies for the refinery?
 -Script Components: Triggers
   -Set up a trigger to prevent the cabin door from being opened if the interior is pressurized?
 -Script Components: Raycasters
   -Also include adding a page to the MFD to display information from the raycaster, and a 'RunRaycast'
    ActionSet to automatically change to and from that page when scanning.
 -Script Components: Using IGC
 -Advanced Customization: Clone and Copying Existing Config

 Side projects
 -RocketOS
 -Custom Turret Integrator